/*
 * Femsa API
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@femsa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.digitalfemsa.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.digitalfemsa.model.PaymentMethodCashResponse;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.digitalfemsa.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.digitalfemsa.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
@JsonDeserialize(using = GetCustomerPaymentMethodDataResponse.GetCustomerPaymentMethodDataResponseDeserializer.class)
@JsonSerialize(using = GetCustomerPaymentMethodDataResponse.GetCustomerPaymentMethodDataResponseSerializer.class)
public class GetCustomerPaymentMethodDataResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetCustomerPaymentMethodDataResponse.class.getName());

    public static class GetCustomerPaymentMethodDataResponseSerializer extends StdSerializer<GetCustomerPaymentMethodDataResponse> {
        public GetCustomerPaymentMethodDataResponseSerializer(Class<GetCustomerPaymentMethodDataResponse> t) {
            super(t);
        }

        public GetCustomerPaymentMethodDataResponseSerializer() {
            this(null);
        }

        @Override
        public void serialize(GetCustomerPaymentMethodDataResponse value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class GetCustomerPaymentMethodDataResponseDeserializer extends StdDeserializer<GetCustomerPaymentMethodDataResponse> {
        public GetCustomerPaymentMethodDataResponseDeserializer() {
            this(GetCustomerPaymentMethodDataResponse.class);
        }

        public GetCustomerPaymentMethodDataResponseDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public GetCustomerPaymentMethodDataResponse deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            GetCustomerPaymentMethodDataResponse newGetCustomerPaymentMethodDataResponse = new GetCustomerPaymentMethodDataResponse();
            Map<String, Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("type");
            switch (discriminatorValue) {
                case "cash":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCashResponse.class);
                    newGetCustomerPaymentMethodDataResponse.setActualInstance(deserialized);
                    return newGetCustomerPaymentMethodDataResponse;
                case "oxxo_recurrent":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCashResponse.class);
                    newGetCustomerPaymentMethodDataResponse.setActualInstance(deserialized);
                    return newGetCustomerPaymentMethodDataResponse;
                case "payment_method_cash_response":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCashResponse.class);
                    newGetCustomerPaymentMethodDataResponse.setActualInstance(deserialized);
                    return newGetCustomerPaymentMethodDataResponse;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for GetCustomerPaymentMethodDataResponse. Possible values: cash oxxo_recurrent payment_method_cash_response", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PaymentMethodCashResponse
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCashResponse.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodCashResponse'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodCashResponse'", e);
            }

            if (match == 1) {
                GetCustomerPaymentMethodDataResponse ret = new GetCustomerPaymentMethodDataResponse();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for GetCustomerPaymentMethodDataResponse: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public GetCustomerPaymentMethodDataResponse getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "GetCustomerPaymentMethodDataResponse cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public GetCustomerPaymentMethodDataResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public GetCustomerPaymentMethodDataResponse(PaymentMethodCashResponse o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentMethodCashResponse", new GenericType<PaymentMethodCashResponse>() {
        });
        JSON.registerDescendants(GetCustomerPaymentMethodDataResponse.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<>();
        mappings.put("cash", PaymentMethodCashResponse.class);
        mappings.put("oxxo_recurrent", PaymentMethodCashResponse.class);
        mappings.put("payment_method_cash_response", PaymentMethodCashResponse.class);
        mappings.put("get_customer_payment_method_data_response", GetCustomerPaymentMethodDataResponse.class);
        JSON.registerDiscriminator(GetCustomerPaymentMethodDataResponse.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetCustomerPaymentMethodDataResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PaymentMethodCashResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PaymentMethodCashResponse.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PaymentMethodCashResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * PaymentMethodCashResponse
     *
     * @return The actual instance (PaymentMethodCashResponse)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodCashResponse`. If the actual instance is not `PaymentMethodCashResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodCashResponse`
     * @throws ClassCastException if the instance is not `PaymentMethodCashResponse`
     */
    public PaymentMethodCashResponse getPaymentMethodCashResponse() throws ClassCastException {
        return (PaymentMethodCashResponse)super.getActualInstance();
    }

}

