/*
 * Femsa API
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@femsa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.digitalfemsa;

import io.digitalfemsa.model.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

/**
 * API tests for OrdersApi
 */
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi(new ApiClient().setBasePath(Utils.getBasePath()));

    @Mock
    private ApiClient apiClient;

    @InjectMocks
    private OrdersApi ordersApi;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }



    /**
     * Cancel Order
     *
     * Cancel an order that has been previously created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //OrderResponse response = api.cancelOrder(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Create order
     *
     * Create a new order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {

    }


    @Test
    public void checkFeeInOrderResponseTest() throws ApiException {
        String acceptLanguage = "es";

        OrderRequest mockOrderRequest = new OrderRequest();
        mockOrderRequest.setCurrency("MXN");
        mockOrderRequest.setFiscalEntity(new OrderFiscalEntityRequest().metadata(new HashMap<>()));
        mockOrderRequest.setShippingContact(new CustomerShippingContacts().metadata(new HashMap<>()));
        CustomerInfoJustCustomerId customer = new CustomerInfoJustCustomerId();
        customer.setCustomerId("cus_2tYENskzTjjgkGQLt");
        mockOrderRequest.setCustomerInfo(new OrderRequestCustomerInfo(customer));
        ChargeRequest chargeRequest = new ChargeRequest();
        chargeRequest.setAmount(1000);
        mockOrderRequest.setCharges(Collections.singletonList(chargeRequest));

        OrderResponse mockOrderResponse = new OrderResponse();
        ChargesDataResponse chargesDataResponse = new ChargesDataResponse();
        chargesDataResponse.setFee(905);
        chargesDataResponse.setLivemode(false);
        chargesDataResponse.setOrderId("ord_2wockd5CqtVW6smNM");
        chargesDataResponse.currency("MXN");
        chargesDataResponse.setStatus("pending_payment");
        OrderResponseCharges charges = new OrderResponseCharges();
        assertNotNull(charges.getData());
        charges.getData().add(chargesDataResponse);
        mockOrderResponse.setCharges(charges);

        ApiResponse<OrderResponse> mockApiResponse = new ApiResponse<>(200, new LinkedHashMap<>(), mockOrderResponse);

        when(apiClient.invokeAPI(
                eq("OrdersApi.createOrder"), eq("/orders"), eq("POST"), anyList(), eq(mockOrderRequest),
                anyMap(), anyMap(), anyMap(), anyString(), anyString(), any(), any(), anyBoolean())
        ).thenReturn((ApiResponse) mockApiResponse);

        when(ordersApi.createOrderWithHttpInfo(mockOrderRequest, acceptLanguage, anyString()))
                .thenReturn(mockApiResponse);

        OrderResponse result = ordersApi.createOrder(mockOrderRequest, acceptLanguage, anyString());

        assertNotNull(result);
        assertNotNull(result.getCharges());
        assertNotNull(result.getCharges().getData());
        assertFalse(result.getCharges().getData().isEmpty());
        assertEquals(905, result.getCharges().getData().get(0).getFee());

    }



    /**
     * Get Order
     *
     * Info for a specific order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderByIdTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //OrderResponse response = api.getOrderById(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Get a list of Orders
     *
     * Get order details in the form of a list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //Integer limit = null;
        //String search = null;
        //String next = null;
        //String previous = null;
        //GetOrdersResponse response = api.getOrders(acceptLanguage, xChildCompanyId, limit, search, next, previous);
        // TODO: test validations
    }

    /**
     * Cancel Refund
     *
     * A refunded order describes the items, amount, and reason an order is being refunded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderCancelRefundTest() throws ApiException {
        //String id = null;
        //String refundId = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //OrderResponse response = api.orderCancelRefund(id, refundId, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Refund Order
     *
     * A refunded order describes the items, amount, and reason an order is being refunded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderRefundTest() throws ApiException {
        //String id = null;
        //OrderRefundRequest orderRefundRequest = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //OrderResponse response = api.orderRefund(id, orderRefundRequest, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Capture Order
     *
     * Processes an order that has been previously authorized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersCreateCaptureTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //OrderCaptureRequest orderCaptureRequest = null;
        //OrderResponse response = api.ordersCreateCapture(id, acceptLanguage, xChildCompanyId, orderCaptureRequest);
        // TODO: test validations
    }

    /**
     * Update Order
     *
     * Update an existing Order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        //String id = null;
        //OrderUpdateRequest orderUpdateRequest = null;
        //String acceptLanguage = null;
        //OrderResponse response = api.updateOrder(id, orderUpdateRequest, acceptLanguage);
        // TODO: test validations
    }

}
